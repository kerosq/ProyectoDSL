//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace IPS.UMLSPF
{
	/// <summary>
	/// DomainRelationship ModeloClassWEBHasClase
	/// Description for IPS.UMLSPF.ModeloClassWEBHasClase
	/// </summary>
	[DslDesign::DisplayNameResource("IPS.UMLSPF.ModeloClassWEBHasClase.DisplayName", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("IPS.UMLSPF.ModeloClassWEBHasClase.Description", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::IPS.UMLSPF.UMLSPFDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a9b6e343-13d8-40ae-994b-012eafb94bff")]
	public partial class ModeloClassWEBHasClase : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModeloClassWEBHasClase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa9b6e343, 0x13d8, 0x40ae, 0x99, 0x4b, 0x01, 0x2e, 0xaf, 0xb9, 0x4b, 0xff);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModeloClassWEBHasClase link in the same Partition as the given ModeloClassWEB
		/// </summary>
		/// <param name="source">ModeloClassWEB to use as the source of the relationship.</param>
		/// <param name="target">Clase to use as the target of the relationship.</param>
		public ModeloClassWEBHasClase(ModeloClassWEB source, Clase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModeloClassWEBHasClase.ModeloClassWEBDomainRoleId, source), new DslModeling::RoleAssignment(ModeloClassWEBHasClase.ClaseDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModeloClassWEBHasClase(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModeloClassWEBHasClase(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModeloClassWEBHasClase(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModeloClassWEBHasClase(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModeloClassWEB domain role code
		
		/// <summary>
		/// ModeloClassWEB domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModeloClassWEBDomainRoleId = new global::System.Guid(0xcd62c36a, 0x4feb, 0x4c05, 0x8a, 0x87, 0xe7, 0x35, 0xab, 0xd2, 0x87, 0x95);
		
		/// <summary>
		/// DomainRole ModeloClassWEB
		/// Description for IPS.UMLSPF.ModeloClassWEBHasClase.ModeloClassWEB
		/// </summary>
		[DslDesign::DisplayNameResource("IPS.UMLSPF.ModeloClassWEBHasClase/ModeloClassWEB.DisplayName", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("IPS.UMLSPF.ModeloClassWEBHasClase/ModeloClassWEB.Description", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Clase", PropertyDisplayNameKey="IPS.UMLSPF.ModeloClassWEBHasClase/ModeloClassWEB.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cd62c36a-4feb-4c05-8a87-e735abd28795")]
		public virtual ModeloClassWEB ModeloClassWEB
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModeloClassWEB)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModeloClassWEBDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModeloClassWEBDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModeloClassWEB of a Clase
		/// <summary>
		/// Gets ModeloClassWEB.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModeloClassWEB GetModeloClassWEB(Clase element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ClaseDomainRoleId) as ModeloClassWEB;
		}
		
		/// <summary>
		/// Sets ModeloClassWEB.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModeloClassWEB(Clase element, ModeloClassWEB newModeloClassWEB)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ClaseDomainRoleId, newModeloClassWEB);
		}
		#endregion
		#region Clase domain role code
		
		/// <summary>
		/// Clase domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClaseDomainRoleId = new global::System.Guid(0x7b20d996, 0xb631, 0x4d0a, 0xbd, 0xc4, 0xbf, 0xcf, 0x98, 0x09, 0x2b, 0xc5);
		
		/// <summary>
		/// DomainRole Clase
		/// Description for IPS.UMLSPF.ModeloClassWEBHasClase.Clase
		/// </summary>
		[DslDesign::DisplayNameResource("IPS.UMLSPF.ModeloClassWEBHasClase/Clase.DisplayName", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("IPS.UMLSPF.ModeloClassWEBHasClase/Clase.Description", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModeloClassWEB", PropertyDisplayNameKey="IPS.UMLSPF.ModeloClassWEBHasClase/Clase.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7b20d996-b631-4d0a-bdc4-bfcf98092bc5")]
		public virtual Clase Clase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Clase)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Clase of a ModeloClassWEB
		/// <summary>
		/// Gets a list of Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Clase> GetClase(ModeloClassWEB element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Clase>, Clase>(element, ModeloClassWEBDomainRoleId);
		}
		#endregion
		#region ModeloClassWEB link accessor
		/// <summary>
		/// Get the list of ModeloClassWEBHasClase links to a ModeloClassWEB.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::IPS.UMLSPF.ModeloClassWEBHasClase> GetLinksToClase ( global::IPS.UMLSPF.ModeloClassWEB modeloClassWEBInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.ModeloClassWEBHasClase>(modeloClassWEBInstance, global::IPS.UMLSPF.ModeloClassWEBHasClase.ModeloClassWEBDomainRoleId);
		}
		#endregion
		#region Clase link accessor
		/// <summary>
		/// Get the ModeloClassWEBHasClase link to a Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::IPS.UMLSPF.ModeloClassWEBHasClase GetLinkToModeloClassWEB (global::IPS.UMLSPF.Clase claseInstance)
		{
			global::System.Collections.Generic.IList<global::IPS.UMLSPF.ModeloClassWEBHasClase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.ModeloClassWEBHasClase>(claseInstance, global::IPS.UMLSPF.ModeloClassWEBHasClase.ClaseDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Clase not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModeloClassWEBHasClase instance accessors
		
		/// <summary>
		/// Get any ModeloClassWEBHasClase links between a given ModeloClassWEB and a Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::IPS.UMLSPF.ModeloClassWEBHasClase> GetLinks( global::IPS.UMLSPF.ModeloClassWEB source, global::IPS.UMLSPF.Clase target )
		{
			global::System.Collections.Generic.List<global::IPS.UMLSPF.ModeloClassWEBHasClase> outLinks = new global::System.Collections.Generic.List<global::IPS.UMLSPF.ModeloClassWEBHasClase>();
			global::System.Collections.Generic.IList<global::IPS.UMLSPF.ModeloClassWEBHasClase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.ModeloClassWEBHasClase>(source, global::IPS.UMLSPF.ModeloClassWEBHasClase.ModeloClassWEBDomainRoleId);
			foreach ( global::IPS.UMLSPF.ModeloClassWEBHasClase link in links )
			{
				if ( target.Equals(link.Clase) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModeloClassWEBHasClase link between a given ModeloClassWEBand a Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::IPS.UMLSPF.ModeloClassWEBHasClase GetLink( global::IPS.UMLSPF.ModeloClassWEB source, global::IPS.UMLSPF.Clase target )
		{
			global::System.Collections.Generic.IList<global::IPS.UMLSPF.ModeloClassWEBHasClase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.ModeloClassWEBHasClase>(source, global::IPS.UMLSPF.ModeloClassWEBHasClase.ModeloClassWEBDomainRoleId);
			foreach ( global::IPS.UMLSPF.ModeloClassWEBHasClase link in links )
			{
				if ( target.Equals(link.Clase) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace IPS.UMLSPF
{
	/// <summary>
	/// DomainRelationship ClaseHasAtributo
	/// Description for IPS.UMLSPF.ClaseHasAtributo
	/// </summary>
	[DslDesign::DisplayNameResource("IPS.UMLSPF.ClaseHasAtributo.DisplayName", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("IPS.UMLSPF.ClaseHasAtributo.Description", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::IPS.UMLSPF.UMLSPFDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8536dcfa-cd47-42ad-bec5-6b313e3f4900")]
	public partial class ClaseHasAtributo : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClaseHasAtributo domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8536dcfa, 0xcd47, 0x42ad, 0xbe, 0xc5, 0x6b, 0x31, 0x3e, 0x3f, 0x49, 0x00);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClaseHasAtributo link in the same Partition as the given Clase
		/// </summary>
		/// <param name="source">Clase to use as the source of the relationship.</param>
		/// <param name="target">Atributo to use as the target of the relationship.</param>
		public ClaseHasAtributo(Clase source, Atributo target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClaseHasAtributo.ClaseDomainRoleId, source), new DslModeling::RoleAssignment(ClaseHasAtributo.AtributoDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClaseHasAtributo(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClaseHasAtributo(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClaseHasAtributo(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClaseHasAtributo(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Clase domain role code
		
		/// <summary>
		/// Clase domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClaseDomainRoleId = new global::System.Guid(0xdb2f3002, 0x204b, 0x4e00, 0x9b, 0x5a, 0xf7, 0x80, 0xc5, 0xc3, 0xee, 0xba);
		
		/// <summary>
		/// DomainRole Clase
		/// Description for IPS.UMLSPF.ClaseHasAtributo.Clase
		/// </summary>
		[DslDesign::DisplayNameResource("IPS.UMLSPF.ClaseHasAtributo/Clase.DisplayName", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("IPS.UMLSPF.ClaseHasAtributo/Clase.Description", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Atributo", PropertyDisplayNameKey="IPS.UMLSPF.ClaseHasAtributo/Clase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("db2f3002-204b-4e00-9b5a-f780c5c3eeba")]
		public virtual Clase Clase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Clase)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Clase of a Atributo
		/// <summary>
		/// Gets Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Clase GetClase(Atributo element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AtributoDomainRoleId) as Clase;
		}
		
		/// <summary>
		/// Sets Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetClase(Atributo element, Clase newClase)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AtributoDomainRoleId, newClase);
		}
		#endregion
		#region Atributo domain role code
		
		/// <summary>
		/// Atributo domain role Id.
		/// </summary>
		public static readonly global::System.Guid AtributoDomainRoleId = new global::System.Guid(0x63085b37, 0x3fe4, 0x4d9f, 0xb9, 0x62, 0xf5, 0x81, 0x75, 0x93, 0xb6, 0x64);
		
		/// <summary>
		/// DomainRole Atributo
		/// Description for IPS.UMLSPF.ClaseHasAtributo.Atributo
		/// </summary>
		[DslDesign::DisplayNameResource("IPS.UMLSPF.ClaseHasAtributo/Atributo.DisplayName", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("IPS.UMLSPF.ClaseHasAtributo/Atributo.Description", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Clase", PropertyDisplayNameKey="IPS.UMLSPF.ClaseHasAtributo/Atributo.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("63085b37-3fe4-4d9f-b962-f5817593b664")]
		public virtual Atributo Atributo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Atributo)DslModeling::DomainRoleInfo.GetRolePlayer(this, AtributoDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AtributoDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Atributo of a Clase
		/// <summary>
		/// Gets a list of Atributo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Atributo> GetAtributo(Clase element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Atributo>, Atributo>(element, ClaseDomainRoleId);
		}
		#endregion
		#region Clase link accessor
		/// <summary>
		/// Get the list of ClaseHasAtributo links to a Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::IPS.UMLSPF.ClaseHasAtributo> GetLinksToAtributo ( global::IPS.UMLSPF.Clase claseInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.ClaseHasAtributo>(claseInstance, global::IPS.UMLSPF.ClaseHasAtributo.ClaseDomainRoleId);
		}
		#endregion
		#region Atributo link accessor
		/// <summary>
		/// Get the ClaseHasAtributo link to a Atributo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::IPS.UMLSPF.ClaseHasAtributo GetLinkToClase (global::IPS.UMLSPF.Atributo atributoInstance)
		{
			global::System.Collections.Generic.IList<global::IPS.UMLSPF.ClaseHasAtributo> links = DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.ClaseHasAtributo>(atributoInstance, global::IPS.UMLSPF.ClaseHasAtributo.AtributoDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Atributo not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ClaseHasAtributo instance accessors
		
		/// <summary>
		/// Get any ClaseHasAtributo links between a given Clase and a Atributo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::IPS.UMLSPF.ClaseHasAtributo> GetLinks( global::IPS.UMLSPF.Clase source, global::IPS.UMLSPF.Atributo target )
		{
			global::System.Collections.Generic.List<global::IPS.UMLSPF.ClaseHasAtributo> outLinks = new global::System.Collections.Generic.List<global::IPS.UMLSPF.ClaseHasAtributo>();
			global::System.Collections.Generic.IList<global::IPS.UMLSPF.ClaseHasAtributo> links = DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.ClaseHasAtributo>(source, global::IPS.UMLSPF.ClaseHasAtributo.ClaseDomainRoleId);
			foreach ( global::IPS.UMLSPF.ClaseHasAtributo link in links )
			{
				if ( target.Equals(link.Atributo) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClaseHasAtributo link between a given Claseand a Atributo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::IPS.UMLSPF.ClaseHasAtributo GetLink( global::IPS.UMLSPF.Clase source, global::IPS.UMLSPF.Atributo target )
		{
			global::System.Collections.Generic.IList<global::IPS.UMLSPF.ClaseHasAtributo> links = DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.ClaseHasAtributo>(source, global::IPS.UMLSPF.ClaseHasAtributo.ClaseDomainRoleId);
			foreach ( global::IPS.UMLSPF.ClaseHasAtributo link in links )
			{
				if ( target.Equals(link.Atributo) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace IPS.UMLSPF
{
	/// <summary>
	/// DomainRelationship ClaseHasOperaciones
	/// Description for IPS.UMLSPF.ClaseHasOperaciones
	/// </summary>
	[DslDesign::DisplayNameResource("IPS.UMLSPF.ClaseHasOperaciones.DisplayName", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("IPS.UMLSPF.ClaseHasOperaciones.Description", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::IPS.UMLSPF.UMLSPFDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("555a51fc-f4e2-4122-b27c-bffa5105fa66")]
	public partial class ClaseHasOperaciones : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClaseHasOperaciones domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x555a51fc, 0xf4e2, 0x4122, 0xb2, 0x7c, 0xbf, 0xfa, 0x51, 0x05, 0xfa, 0x66);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClaseHasOperaciones link in the same Partition as the given Clase
		/// </summary>
		/// <param name="source">Clase to use as the source of the relationship.</param>
		/// <param name="target">Operaciones to use as the target of the relationship.</param>
		public ClaseHasOperaciones(Clase source, Operaciones target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClaseHasOperaciones.ClaseDomainRoleId, source), new DslModeling::RoleAssignment(ClaseHasOperaciones.OperacionesDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClaseHasOperaciones(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClaseHasOperaciones(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClaseHasOperaciones(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClaseHasOperaciones(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Clase domain role code
		
		/// <summary>
		/// Clase domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClaseDomainRoleId = new global::System.Guid(0xdfc13914, 0x090a, 0x41d9, 0xb5, 0x2b, 0x2c, 0x2f, 0x3f, 0xe7, 0x55, 0xcd);
		
		/// <summary>
		/// DomainRole Clase
		/// Description for IPS.UMLSPF.ClaseHasOperaciones.Clase
		/// </summary>
		[DslDesign::DisplayNameResource("IPS.UMLSPF.ClaseHasOperaciones/Clase.DisplayName", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("IPS.UMLSPF.ClaseHasOperaciones/Clase.Description", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Operaciones", PropertyDisplayNameKey="IPS.UMLSPF.ClaseHasOperaciones/Clase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dfc13914-090a-41d9-b52b-2c2f3fe755cd")]
		public virtual Clase Clase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Clase)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Clase of a Operaciones
		/// <summary>
		/// Gets Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Clase GetClase(Operaciones element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OperacionesDomainRoleId) as Clase;
		}
		
		/// <summary>
		/// Sets Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetClase(Operaciones element, Clase newClase)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OperacionesDomainRoleId, newClase);
		}
		#endregion
		#region Operaciones domain role code
		
		/// <summary>
		/// Operaciones domain role Id.
		/// </summary>
		public static readonly global::System.Guid OperacionesDomainRoleId = new global::System.Guid(0x78609571, 0x12e9, 0x4d9a, 0x90, 0x70, 0xed, 0xf2, 0x62, 0x8d, 0x29, 0x72);
		
		/// <summary>
		/// DomainRole Operaciones
		/// Description for IPS.UMLSPF.ClaseHasOperaciones.Operaciones
		/// </summary>
		[DslDesign::DisplayNameResource("IPS.UMLSPF.ClaseHasOperaciones/Operaciones.DisplayName", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("IPS.UMLSPF.ClaseHasOperaciones/Operaciones.Description", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Clase", PropertyDisplayNameKey="IPS.UMLSPF.ClaseHasOperaciones/Operaciones.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("78609571-12e9-4d9a-9070-edf2628d2972")]
		public virtual Operaciones Operaciones
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Operaciones)DslModeling::DomainRoleInfo.GetRolePlayer(this, OperacionesDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OperacionesDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Operaciones of a Clase
		/// <summary>
		/// Gets a list of Operaciones.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Operaciones> GetOperaciones(Clase element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Operaciones>, Operaciones>(element, ClaseDomainRoleId);
		}
		#endregion
		#region Clase link accessor
		/// <summary>
		/// Get the list of ClaseHasOperaciones links to a Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::IPS.UMLSPF.ClaseHasOperaciones> GetLinksToOperaciones ( global::IPS.UMLSPF.Clase claseInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.ClaseHasOperaciones>(claseInstance, global::IPS.UMLSPF.ClaseHasOperaciones.ClaseDomainRoleId);
		}
		#endregion
		#region Operaciones link accessor
		/// <summary>
		/// Get the ClaseHasOperaciones link to a Operaciones.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::IPS.UMLSPF.ClaseHasOperaciones GetLinkToClase (global::IPS.UMLSPF.Operaciones operacionesInstance)
		{
			global::System.Collections.Generic.IList<global::IPS.UMLSPF.ClaseHasOperaciones> links = DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.ClaseHasOperaciones>(operacionesInstance, global::IPS.UMLSPF.ClaseHasOperaciones.OperacionesDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Operaciones not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ClaseHasOperaciones instance accessors
		
		/// <summary>
		/// Get any ClaseHasOperaciones links between a given Clase and a Operaciones.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::IPS.UMLSPF.ClaseHasOperaciones> GetLinks( global::IPS.UMLSPF.Clase source, global::IPS.UMLSPF.Operaciones target )
		{
			global::System.Collections.Generic.List<global::IPS.UMLSPF.ClaseHasOperaciones> outLinks = new global::System.Collections.Generic.List<global::IPS.UMLSPF.ClaseHasOperaciones>();
			global::System.Collections.Generic.IList<global::IPS.UMLSPF.ClaseHasOperaciones> links = DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.ClaseHasOperaciones>(source, global::IPS.UMLSPF.ClaseHasOperaciones.ClaseDomainRoleId);
			foreach ( global::IPS.UMLSPF.ClaseHasOperaciones link in links )
			{
				if ( target.Equals(link.Operaciones) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClaseHasOperaciones link between a given Claseand a Operaciones.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::IPS.UMLSPF.ClaseHasOperaciones GetLink( global::IPS.UMLSPF.Clase source, global::IPS.UMLSPF.Operaciones target )
		{
			global::System.Collections.Generic.IList<global::IPS.UMLSPF.ClaseHasOperaciones> links = DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.ClaseHasOperaciones>(source, global::IPS.UMLSPF.ClaseHasOperaciones.ClaseDomainRoleId);
			foreach ( global::IPS.UMLSPF.ClaseHasOperaciones link in links )
			{
				if ( target.Equals(link.Operaciones) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace IPS.UMLSPF
{
	/// <summary>
	/// DomainRelationship conAsociacion
	/// Description for IPS.UMLSPF.conAsociacion
	/// </summary>
	[DslDesign::DisplayNameResource("IPS.UMLSPF.conAsociacion.DisplayName", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("IPS.UMLSPF.conAsociacion.Description", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::IPS.UMLSPF.UMLSPFDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6f46edc6-89a2-47b6-b489-b76d99a215bc")]
	public partial class conAsociacion : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// conAsociacion domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6f46edc6, 0x89a2, 0x47b6, 0xb4, 0x89, 0xb7, 0x6d, 0x99, 0xa2, 0x15, 0xbc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a conAsociacion link in the same Partition as the given Clase
		/// </summary>
		/// <param name="source">Clase to use as the source of the relationship.</param>
		/// <param name="target">Clase to use as the target of the relationship.</param>
		public conAsociacion(Clase source, Clase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(conAsociacion.SourceClaseDomainRoleId, source), new DslModeling::RoleAssignment(conAsociacion.TargetClaseDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public conAsociacion(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public conAsociacion(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public conAsociacion(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public conAsociacion(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceClase domain role code
		
		/// <summary>
		/// SourceClase domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceClaseDomainRoleId = new global::System.Guid(0x7fd2a6d7, 0x29f6, 0x43ea, 0x9c, 0xb2, 0x49, 0x7a, 0x0f, 0x0b, 0x34, 0x5a);
		
		/// <summary>
		/// DomainRole SourceClase
		/// Description for IPS.UMLSPF.conAsociacion.SourceClase
		/// </summary>
		[DslDesign::DisplayNameResource("IPS.UMLSPF.conAsociacion/SourceClase.DisplayName", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("IPS.UMLSPF.conAsociacion/SourceClase.Description", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetClase", PropertyDisplayNameKey="IPS.UMLSPF.conAsociacion/SourceClase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7fd2a6d7-29f6-43ea-9cb2-497a0f0b345a")]
		public virtual Clase SourceClase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Clase)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceClaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceClaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceClase of a Clase
		/// <summary>
		/// Gets a list of SourceClase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Clase> GetSourceClase(Clase element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Clase>, Clase>(element, TargetClaseDomainRoleId);
		}
		#endregion
		#region TargetClase domain role code
		
		/// <summary>
		/// TargetClase domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetClaseDomainRoleId = new global::System.Guid(0x67f5ef43, 0xfd4f, 0x4067, 0x92, 0xea, 0xe4, 0x7d, 0xcf, 0x72, 0xc7, 0x44);
		
		/// <summary>
		/// DomainRole TargetClase
		/// Description for IPS.UMLSPF.conAsociacion.TargetClase
		/// </summary>
		[DslDesign::DisplayNameResource("IPS.UMLSPF.conAsociacion/TargetClase.DisplayName", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("IPS.UMLSPF.conAsociacion/TargetClase.Description", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceClase", PropertyDisplayNameKey="IPS.UMLSPF.conAsociacion/TargetClase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("67f5ef43-fd4f-4067-92ea-e47dcf72c744")]
		public virtual Clase TargetClase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Clase)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetClaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetClaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetClase of a Clase
		/// <summary>
		/// Gets a list of TargetClase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Clase> GetTargetClase(Clase element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Clase>, Clase>(element, SourceClaseDomainRoleId);
		}
		#endregion
		#region SourceClase link accessor
		/// <summary>
		/// Get the list of conAsociacion links to a Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::IPS.UMLSPF.conAsociacion> GetLinksToTargetClase ( global::IPS.UMLSPF.Clase sourceClaseInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.conAsociacion>(sourceClaseInstance, global::IPS.UMLSPF.conAsociacion.SourceClaseDomainRoleId);
		}
		#endregion
		#region TargetClase link accessor
		/// <summary>
		/// Get the list of conAsociacion links to a Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::IPS.UMLSPF.conAsociacion> GetLinksToSourceClase ( global::IPS.UMLSPF.Clase targetClaseInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.conAsociacion>(targetClaseInstance, global::IPS.UMLSPF.conAsociacion.TargetClaseDomainRoleId);
		}
		#endregion
		#region conAsociacion instance accessors
		
		/// <summary>
		/// Get any conAsociacion links between a given Clase and a Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::IPS.UMLSPF.conAsociacion> GetLinks( global::IPS.UMLSPF.Clase source, global::IPS.UMLSPF.Clase target )
		{
			global::System.Collections.Generic.List<global::IPS.UMLSPF.conAsociacion> outLinks = new global::System.Collections.Generic.List<global::IPS.UMLSPF.conAsociacion>();
			global::System.Collections.Generic.IList<global::IPS.UMLSPF.conAsociacion> links = DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.conAsociacion>(source, global::IPS.UMLSPF.conAsociacion.SourceClaseDomainRoleId);
			foreach ( global::IPS.UMLSPF.conAsociacion link in links )
			{
				if ( target.Equals(link.TargetClase) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one conAsociacion link between a given Claseand a Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::IPS.UMLSPF.conAsociacion GetLink( global::IPS.UMLSPF.Clase source, global::IPS.UMLSPF.Clase target )
		{
			global::System.Collections.Generic.IList<global::IPS.UMLSPF.conAsociacion> links = DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.conAsociacion>(source, global::IPS.UMLSPF.conAsociacion.SourceClaseDomainRoleId);
			foreach ( global::IPS.UMLSPF.conAsociacion link in links )
			{
				if ( target.Equals(link.TargetClase) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace IPS.UMLSPF
{
	/// <summary>
	/// DomainRelationship conComposicion
	/// Description for IPS.UMLSPF.conComposicion
	/// </summary>
	[DslDesign::DisplayNameResource("IPS.UMLSPF.conComposicion.DisplayName", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("IPS.UMLSPF.conComposicion.Description", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::IPS.UMLSPF.UMLSPFDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("89962120-883f-43a1-8030-7055c29c48b7")]
	public partial class conComposicion : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// conComposicion domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x89962120, 0x883f, 0x43a1, 0x80, 0x30, 0x70, 0x55, 0xc2, 0x9c, 0x48, 0xb7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a conComposicion link in the same Partition as the given Clase
		/// </summary>
		/// <param name="source">Clase to use as the source of the relationship.</param>
		/// <param name="target">Clase to use as the target of the relationship.</param>
		public conComposicion(Clase source, Clase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(conComposicion.CompSourceClaseDomainRoleId, source), new DslModeling::RoleAssignment(conComposicion.CompTargetClaseDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public conComposicion(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public conComposicion(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public conComposicion(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public conComposicion(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CompSourceClase domain role code
		
		/// <summary>
		/// CompSourceClase domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompSourceClaseDomainRoleId = new global::System.Guid(0x9a7ed65b, 0xa40b, 0x450a, 0x93, 0xef, 0xf0, 0x52, 0x59, 0x32, 0xe0, 0x35);
		
		/// <summary>
		/// DomainRole CompSourceClase
		/// Description for IPS.UMLSPF.conComposicion.CompSourceClase
		/// </summary>
		[DslDesign::DisplayNameResource("IPS.UMLSPF.conComposicion/CompSourceClase.DisplayName", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("IPS.UMLSPF.conComposicion/CompSourceClase.Description", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CompTargetClase", PropertyDisplayNameKey="IPS.UMLSPF.conComposicion/CompSourceClase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9a7ed65b-a40b-450a-93ef-f0525932e035")]
		public virtual Clase CompSourceClase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Clase)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompSourceClaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompSourceClaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CompSourceClase of a Clase
		/// <summary>
		/// Gets CompSourceClase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Clase GetCompSourceClase(Clase element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CompTargetClaseDomainRoleId) as Clase;
		}
		
		/// <summary>
		/// Sets CompSourceClase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCompSourceClase(Clase element, Clase newCompSourceClase)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CompTargetClaseDomainRoleId, newCompSourceClase);
		}
		#endregion
		#region CompTargetClase domain role code
		
		/// <summary>
		/// CompTargetClase domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompTargetClaseDomainRoleId = new global::System.Guid(0x95363e4f, 0x4255, 0x4f0d, 0x9b, 0x88, 0xa7, 0x5e, 0xa4, 0x61, 0xa6, 0xd4);
		
		/// <summary>
		/// DomainRole CompTargetClase
		/// Description for IPS.UMLSPF.conComposicion.CompTargetClase
		/// </summary>
		[DslDesign::DisplayNameResource("IPS.UMLSPF.conComposicion/CompTargetClase.DisplayName", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("IPS.UMLSPF.conComposicion/CompTargetClase.Description", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CompSourceClase", PropertyDisplayNameKey="IPS.UMLSPF.conComposicion/CompTargetClase.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("95363e4f-4255-4f0d-9b88-a75ea461a6d4")]
		public virtual Clase CompTargetClase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Clase)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompTargetClaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompTargetClaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CompTargetClase of a Clase
		/// <summary>
		/// Gets a list of CompTargetClase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Clase> GetCompTargetClase(Clase element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Clase>, Clase>(element, CompSourceClaseDomainRoleId);
		}
		#endregion
		#region CompSourceClase link accessor
		/// <summary>
		/// Get the list of conComposicion links to a Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::IPS.UMLSPF.conComposicion> GetLinksToCompTargetClase ( global::IPS.UMLSPF.Clase compSourceClaseInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.conComposicion>(compSourceClaseInstance, global::IPS.UMLSPF.conComposicion.CompSourceClaseDomainRoleId);
		}
		#endregion
		#region CompTargetClase link accessor
		/// <summary>
		/// Get the conComposicion link to a Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::IPS.UMLSPF.conComposicion GetLinkToCompSourceClase (global::IPS.UMLSPF.Clase compTargetClaseInstance)
		{
			global::System.Collections.Generic.IList<global::IPS.UMLSPF.conComposicion> links = DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.conComposicion>(compTargetClaseInstance, global::IPS.UMLSPF.conComposicion.CompTargetClaseDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CompTargetClase not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region conComposicion instance accessors
		
		/// <summary>
		/// Get any conComposicion links between a given Clase and a Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::IPS.UMLSPF.conComposicion> GetLinks( global::IPS.UMLSPF.Clase source, global::IPS.UMLSPF.Clase target )
		{
			global::System.Collections.Generic.List<global::IPS.UMLSPF.conComposicion> outLinks = new global::System.Collections.Generic.List<global::IPS.UMLSPF.conComposicion>();
			global::System.Collections.Generic.IList<global::IPS.UMLSPF.conComposicion> links = DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.conComposicion>(source, global::IPS.UMLSPF.conComposicion.CompSourceClaseDomainRoleId);
			foreach ( global::IPS.UMLSPF.conComposicion link in links )
			{
				if ( target.Equals(link.CompTargetClase) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one conComposicion link between a given Claseand a Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::IPS.UMLSPF.conComposicion GetLink( global::IPS.UMLSPF.Clase source, global::IPS.UMLSPF.Clase target )
		{
			global::System.Collections.Generic.IList<global::IPS.UMLSPF.conComposicion> links = DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.conComposicion>(source, global::IPS.UMLSPF.conComposicion.CompSourceClaseDomainRoleId);
			foreach ( global::IPS.UMLSPF.conComposicion link in links )
			{
				if ( target.Equals(link.CompTargetClase) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace IPS.UMLSPF
{
	/// <summary>
	/// DomainRelationship conAgregacion
	/// Description for IPS.UMLSPF.conAgregacion
	/// </summary>
	[DslDesign::DisplayNameResource("IPS.UMLSPF.conAgregacion.DisplayName", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("IPS.UMLSPF.conAgregacion.Description", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::IPS.UMLSPF.UMLSPFDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d8f51cbd-c973-4dd7-a8d8-68f9f0e7a26e")]
	public partial class conAgregacion : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// conAgregacion domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd8f51cbd, 0xc973, 0x4dd7, 0xa8, 0xd8, 0x68, 0xf9, 0xf0, 0xe7, 0xa2, 0x6e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a conAgregacion link in the same Partition as the given Clase
		/// </summary>
		/// <param name="source">Clase to use as the source of the relationship.</param>
		/// <param name="target">Clase to use as the target of the relationship.</param>
		public conAgregacion(Clase source, Clase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(conAgregacion.SourceClaseDomainRoleId, source), new DslModeling::RoleAssignment(conAgregacion.TargetClaseDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public conAgregacion(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public conAgregacion(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public conAgregacion(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public conAgregacion(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceClase domain role code
		
		/// <summary>
		/// SourceClase domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceClaseDomainRoleId = new global::System.Guid(0x88efde2e, 0x3c46, 0x47d5, 0xa8, 0xdc, 0x0e, 0xf9, 0xa8, 0xed, 0xb9, 0xd1);
		
		/// <summary>
		/// DomainRole SourceClase
		/// Description for IPS.UMLSPF.conAgregacion.SourceClase
		/// </summary>
		[DslDesign::DisplayNameResource("IPS.UMLSPF.conAgregacion/SourceClase.DisplayName", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("IPS.UMLSPF.conAgregacion/SourceClase.Description", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AgreTargetClase", PropertyDisplayNameKey="IPS.UMLSPF.conAgregacion/SourceClase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("88efde2e-3c46-47d5-a8dc-0ef9a8edb9d1")]
		public virtual Clase SourceClase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Clase)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceClaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceClaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AgreSourceClase of a Clase
		/// <summary>
		/// Gets a list of AgreSourceClase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Clase> GetAgreSourceClase(Clase element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Clase>, Clase>(element, TargetClaseDomainRoleId);
		}
		#endregion
		#region TargetClase domain role code
		
		/// <summary>
		/// TargetClase domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetClaseDomainRoleId = new global::System.Guid(0x89f58eba, 0x60f9, 0x4812, 0x92, 0x14, 0x67, 0xcc, 0x87, 0x1e, 0xc4, 0x5a);
		
		/// <summary>
		/// DomainRole TargetClase
		/// Description for IPS.UMLSPF.conAgregacion.TargetClase
		/// </summary>
		[DslDesign::DisplayNameResource("IPS.UMLSPF.conAgregacion/TargetClase.DisplayName", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("IPS.UMLSPF.conAgregacion/TargetClase.Description", typeof(global::IPS.UMLSPF.UMLSPFDomainModel), "IPS.UMLSPF.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AgreSourceClase", PropertyDisplayNameKey="IPS.UMLSPF.conAgregacion/TargetClase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("89f58eba-60f9-4812-9214-67cc871ec45a")]
		public virtual Clase TargetClase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Clase)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetClaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetClaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AgreTargetClase of a Clase
		/// <summary>
		/// Gets a list of AgreTargetClase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Clase> GetAgreTargetClase(Clase element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Clase>, Clase>(element, SourceClaseDomainRoleId);
		}
		#endregion
		#region SourceClase link accessor
		/// <summary>
		/// Get the list of conAgregacion links to a Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::IPS.UMLSPF.conAgregacion> GetLinksToAgreTargetClase ( global::IPS.UMLSPF.Clase sourceClaseInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.conAgregacion>(sourceClaseInstance, global::IPS.UMLSPF.conAgregacion.SourceClaseDomainRoleId);
		}
		#endregion
		#region TargetClase link accessor
		/// <summary>
		/// Get the list of conAgregacion links to a Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::IPS.UMLSPF.conAgregacion> GetLinksToAgreSourceClase ( global::IPS.UMLSPF.Clase targetClaseInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.conAgregacion>(targetClaseInstance, global::IPS.UMLSPF.conAgregacion.TargetClaseDomainRoleId);
		}
		#endregion
		#region conAgregacion instance accessors
		
		/// <summary>
		/// Get any conAgregacion links between a given Clase and a Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::IPS.UMLSPF.conAgregacion> GetLinks( global::IPS.UMLSPF.Clase source, global::IPS.UMLSPF.Clase target )
		{
			global::System.Collections.Generic.List<global::IPS.UMLSPF.conAgregacion> outLinks = new global::System.Collections.Generic.List<global::IPS.UMLSPF.conAgregacion>();
			global::System.Collections.Generic.IList<global::IPS.UMLSPF.conAgregacion> links = DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.conAgregacion>(source, global::IPS.UMLSPF.conAgregacion.SourceClaseDomainRoleId);
			foreach ( global::IPS.UMLSPF.conAgregacion link in links )
			{
				if ( target.Equals(link.TargetClase) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one conAgregacion link between a given Claseand a Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::IPS.UMLSPF.conAgregacion GetLink( global::IPS.UMLSPF.Clase source, global::IPS.UMLSPF.Clase target )
		{
			global::System.Collections.Generic.IList<global::IPS.UMLSPF.conAgregacion> links = DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.UMLSPF.conAgregacion>(source, global::IPS.UMLSPF.conAgregacion.SourceClaseDomainRoleId);
			foreach ( global::IPS.UMLSPF.conAgregacion link in links )
			{
				if ( target.Equals(link.TargetClase) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
